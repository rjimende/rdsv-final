#!/bin/bash

SDWNS=rdsv

echo "alias kubectl='microk8s kubectl'" >> ~/.bashrc
echo "export SDWNS=$SDWNS" >> ~/.bashrc

microk8s kubectl create namespace $SDWNS 
microk8s kubectl get namespace $SDWNS 

# Enable access to services running on the host machine via fixed IP address
microk8s enable host-access

# Enable NGINX Ingress Controller for MicroK8 to access pod services through localhost:port
microk8s enable ingress


# Create external interfaces
echo "Creating external interfaces"
sudo ovs-vsctl --if-exists del-br AccessNet1
sudo ovs-vsctl --if-exists del-br AccessNet2
sudo ovs-vsctl --if-exists  del-br ExtNet1
sudo ovs-vsctl --if-exists  del-br ExtNet2
sudo ovs-vsctl --if-exists  del-br MplsWan
sudo ovs-vsctl add-br AccessNet1
sudo ovs-vsctl add-br AccessNet2
sudo ovs-vsctl add-br ExtNet1
sudo ovs-vsctl add-br ExtNet2
sudo ovs-vsctl add-br MplsWan

# Configure Multus accessnet1
microk8s kubectl get -n $SDWNS network-attachment-definitions accessnet1 || \
cat <<EOF | microk8s kubectl create -n $SDWNS -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
 name: accessnet1
 annotations:
   k8s.v1.cni.cncf.io/resourceName: ovs-cni.network.kubevirt.io/AccessNet1
spec:
 config: '{micro
   "cniVersion": "0.3.1",
   "type": "ovs",
   "bridge": "AccessNet1"
 }'
EOF

# Configure Multus accessnet2
microk8s kubectl get -n $SDWNS network-attachment-definitions accessnet2 || \
cat <<EOF | microk8s kubectl create -n $SDWNS -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
 name: accessnet2
 annotations:
   k8s.v1.cni.cncf.io/resourceName: ovs-cni.network.kubevirt.io/AccessNet2
spec:
 config: '{
   "cniVersion": "0.3.1",
   "type": "ovs",
   "bridge": "AccessNet2"
 }'
EOF

# Configure Multus extnet1
microk8s kubectl get -n $SDWNS network-attachment-definitions extnet1 || \
cat <<EOF | microk8s kubectl create -n $SDWNS -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
 name: extnet1
 annotations:
   k8s.v1.cni.cncf.io/resourceName: ovs-cni.network.kubevirt.io/ExtNet1
spec:
 config: '{
   "cniVersion": "0.3.1",
   "type": "ovs",
   "bridge": "ExtNet1"
 }'
EOF


# Configure Multus extnet2
microk8s kubectl get -n $SDWNS network-attachment-definitions extnet2 || \
cat <<EOF | microk8s kubectl create -n $SDWNS -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
 name: extnet2
 annotations:
   k8s.v1.cni.cncf.io/resourceName: ovs-cni.network.kubevirt.io/ExtNet2
spec:
 config: '{
   "cniVersion": "0.3.1",
   "type": "ovs",
   "bridge": "ExtNet2"
 }'
EOF


# Configure Multus mplswan
microk8s kubectl get -n $SDWNS network-attachment-definitions mplswan || \
cat <<EOF | microk8s kubectl create -n $SDWNS -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
 name: mplswan
 annotations:
   k8s.v1.cni.cncf.io/resourceName: ovs-cni.network.kubevirt.io/MplsWan
spec:
 config: '{
   "cniVersion": "0.3.1",
   "type": "ovs",
   "bridge": "MplsWan"
 }'
EOF

echo "-- kubectl get -n $SDWNS network-attachment-definitions"
microk8s kubectl get -n $SDWNS network-attachment-definitions
